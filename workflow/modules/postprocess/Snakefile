import sys
import os
from pathlib import Path

# Get utils. This is not great, but we can move to setup.py and install via pip later if want
utils_path = (Path(workflow.main_snakefile).parent.parent.parent).resolve()
if str(utils_path) not in sys.path:
    sys.path.append(str(utils_path))

import pandas as pd
import snparcher_utils
configfile: "config/config.yaml"

samples = snparcher_utils.parse_sample_sheet(config)
REFGENOME = samples['refGenome'].unique().tolist()

rule all:
    input:
        expand("results/{refGenome}/{prefix}_filtered.vcf.gz", refGenome=REFGENOME, prefix=config['final_prefix']),
        expand("results/{refGenome}/{prefix}_clean_snps.vcf.gz", refGenome=REFGENOME, prefix=config['final_prefix']),
        expand("results/{refGenome}/{prefix}_clean_indels.vcf.gz", refGenome=REFGENOME, prefix=config['final_prefix'])

rule filter_individuals:
    """
    make list of individuals to exclude based on sampleType column
    """
    output:
        include = "results/{refGenome}/postprocess/{prefix}_samps.txt",
    run:
        out_df = samples[["BioSample", "SampleType"]]
        out_df.drop_duplicates("BioSample", inplace=True)
        include =out_df[~out_df.SampleType.isin(["exclude"])].BioSample
        include_clean = include.dropna()
        include_clean.to_csv(output[0], index=False, sep="\t", header=False)

rule basic_filter:
    """
    Filters a vcf file to remove samples marked exclude, sites that don't pass filters,
    sites with reference equal to N or alt equal to ., and sites with AF == 0.
    """
    input: 
        vcf = "results/{refGenome}/{prefix}_raw.vcf.gz",
        include = "results/{refGenome}/postprocess/{prefix}_samps.txt"
    output:
        filtered = "results/{refGenome}/{prefix}_filtered.vcf.gz",
        filtered_idx = "results/{refGenome}/{prefix}_filtered.vcf.gz.csi"
    conda:
        "envs/filter.yml"
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 4000
    shell:
        """
        bcftools view -S {input.include} -f .,PASS {input.vcf} -a -U -O u | bcftools +fill-tags -Ou |
        bcftools view -m2 -e 'AF==0 | ref="N" | ALT="."' -O z -o {output.filtered}
        bcftools index {output.filtered}
        """

rule update_bed:
    """
    Updates callable sites bed file to add contigs less than threshold to regions to exclude
    """
    input:
        bed = "results/{refGenome}/{prefix}_callable_sites.bed",
        fai = "results/{refGenome}/data/genome/{refGenome}.fna.fai"
    output:
        bed = "results/{refGenome}/postprocess/{prefix}_exclude_sites.bed",
        tmp_bed = temp("results/{refGenome}/postprocess/{prefix}_tmp.bed")
    conda:
        "envs/bed.yml"
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 4000
    params:
        size_filter = config["contig_size"],
    shell:
        """
        awk 'BEGIN{{OFS="\\t"}}{{if ($2<{params.size_filter}) {{print $1,0,$2}}}}' {input.fai} > {output.tmp_bed}
        cat {output.tmp_bed} {input.bed} | bedtools sort -i - | bedtools merge -i - > {output.bed}
        """

rule strict_filter:  
    input: 
        bed = "results/{refGenome}/postprocess/{prefix}_exclude_sites.bed",
        vcf = "results/{refGenome}/{prefix}_filtered.vcf.gz",
        filtered_idx = "results/{refGenome}/{prefix}_filtered.vcf.gz.csi"
    output: 
        vcf = temp("results/{refGenome}/postprocess/{prefix}_filtered.TEMP.vcf.gz"),
        idx = temp("results/{refGenome}/postprocess/{prefix}_filtered.TEMP.vcf.gz.csi")
    conda:
        "envs/filter.yml"
    params:
        miss = config["missingness"],
        maf = config["maf"],
        chr_ex = config["scaffolds_to_exclude"]
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 4000    
    shell:
        """
        if [ -z "{params.chr_ex}" ]
        then
            bcftools view -R {input.bed} -m2 -M2 \
            -e 'F_MISSING > {params.miss} | AF<{params.maf}' \
            {input.vcf} -O u -o {output.vcf}
        else
            bcftools view -t ^{params.chr_ex} -R {input.bed} -m2 -M2 \
            -e 'F_MISSING > {params.miss} | AF<{params.maf}' \
            {input.vcf} -O u -o {output.vcf} 
        fi
        bcftools index {output.vcf}
        """

rule subset_indels:
    """
    Produce a clean vcf with only indels variants.
    """
    input: 
        vcf = "results/{refGenome}/postprocess/{prefix}_filtered.TEMP.vcf.gz",
        idx = "results/{refGenome}/postprocess/{prefix}_filtered.TEMP.vcf.gz.csi",
    output: 
        vcf = "results/{refGenome}/{prefix}_clean_indels.vcf.gz",
        idx = "results/{refGenome}/{prefix}_clean_indels.vcf.gz.tbi"
    conda:
        "envs/filter.yml"
    log:
        "logs/{refGenome}/postprocess/{prefix}_subset_indels.txt"
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 4000
    shell:
        """
        bcftools view -v indels -O z -o {output.vcf} {input.vcf}
        bcftools index -t {output.vcf}
        """

rule subset_snps:
    """
    Produce a clean vcf with only simple snps.
    """
    input: 
        vcf = "results/{refGenome}/postprocess/{prefix}_filtered.TEMP.vcf.gz",
        idx = "results/{refGenome}/postprocess/{prefix}_filtered.TEMP.vcf.gz.csi"
    output: 
        vcf = "results/{refGenome}/{prefix}_clean_snps.vcf.gz",
        idx = "results/{refGenome}/{prefix}_clean_snps.vcf.gz.tbi"
    conda:
        "envs/filter.yml"    
    log:
        "logs/{refGenome}/postprocess/{prefix}_subset_snps.txt"
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 4000
    shell:
        """
        bcftools view -v snps -e 'TYPE ~ "indel"' -O z -o {output.vcf} {input.vcf}
        bcftools index -t {output.vcf}
        """
